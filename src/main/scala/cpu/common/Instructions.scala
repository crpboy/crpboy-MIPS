package cpu.common

import chisel3._
import chisel3.util.BitPat

object Instructions {
  //                        |      |    |    |    |    |     |
  val ADD         = BitPat("b000000???????????????00000100000")
  val ADDI        = BitPat("b001000??????????????????????????")
  val ADDIU       = BitPat("b001001??????????????????????????")
  val ADDU        = BitPat("b000000???????????????00000100001")
  val AND         = BitPat("b000000???????????????00000100100")
  val ANDI        = BitPat("b001100??????????????????????????")
  val BEQ         = BitPat("b000100??????????????????????????")
  val BGEZ        = BitPat("b000001?????00001????????????????")
  val BGEZAL      = BitPat("b000001?????10001????????????????")
  val BGTZ        = BitPat("b000111?????00000????????????????")
  val BLEZ        = BitPat("b000110?????00000????????????????")
  val BLTZ        = BitPat("b000001?????00000????????????????")
  val BLTZAL      = BitPat("b000001?????10000????????????????")
  val BNE         = BitPat("b000101??????????????????????????")
  val BNEL        = BitPat("b010101??????????????????????????")
  val BLTZL       = BitPat("b000001?????00010????????????????")
  val BLTZALL     = BitPat("b000001?????10010????????????????")
  val BLEZL       = BitPat("b010110?????00000????????????????")
  val BGTZL       = BitPat("b010111?????00000????????????????")
  val BGEZL       = BitPat("b000001?????00011????????????????")
  val BGEZALL     = BitPat("b000001?????10011????????????????")
  val BEQL        = BitPat("b010100??????????????????????????")
  val BREAK       = BitPat("b000000????????????????????001101")
  val CACHE       = BitPat("b101111??????????????????????????")
  val CLO         = BitPat("b011100???????????????00000100001") // Count Leading Ones in Word
  val CLZ         = BitPat("b011100???????????????00000100000") // Count Leading Zeros in Word
  val DIV         = BitPat("b000000??????????0000000000011010") // Divide Word
  val DIVU        = BitPat("b000000??????????0000000000011011") // Divide Unsigned Word
  val ERET        = BitPat("b01000010000000000000000000011000") // Exception Return
  val J           = BitPat("b000010??????????????????????????") // Jump
  val JAL         = BitPat("b000011??????????????????????????") // Jump and Link
  val JALR        = BitPat("b000000?????00000??????????001001") // Jump and Link Register
  val JR          = BitPat("b000000?????0000000000?????001000") // Jump Register
  val LB          = BitPat("b100000??????????????????????????") // Load Byte
  val LBU         = BitPat("b100100??????????????????????????") // Load Byte Unsigned
  val LH          = BitPat("b100001??????????????????????????") // Load Halfword
  val LHU         = BitPat("b100101??????????????????????????") // Load Halfword Unsigned
  val LL          = BitPat("b110000??????????????????????????") // Load Linked Word
  val LUI         = BitPat("b00111100000?????????????????????") // Load Upper Immediate
  val LW          = BitPat("b100011??????????????????????????") // Load Word
  val LWL         = BitPat("b100010??????????????????????????") // Load Word Left
  val LWR         = BitPat("b100110??????????????????????????") // Load Word Right
  val MADD        = BitPat("b011100??????????0000000000000000") // Multiply and Add Word to Hi, Lo
  val MADDU       = BitPat("b011100??????????0000000000000001") // Multiply and Add Unsigned Word to Hi, Lo
  val MFC0        = BitPat("b01000000000??????????00000000???") // Move from Coprocessor 0
  val MFHI        = BitPat("b0000000000000000?????00000010000") // Move From HI Register
  val MFLO        = BitPat("b0000000000000000?????00000010010") // Move From LO Register
  val MOVN        = BitPat("b000000???????????????00000001011") // Move Conditional on Not Zero
  val MOVZ        = BitPat("b000000???????????????00000001010") // Move Conditional on Zero
  val MSUB        = BitPat("b011100??????????0000000000000100") // Multiply and Subtract Word to Hi, Lo
  val MSUBU       = BitPat("b011100??????????0000000000000101") // Multiply and Subtract Unsigned Word to Hi, Lo
  val MTC0        = BitPat("b01000000100??????????00000000???") // Move to Coprocessor 0
  val MTHI        = BitPat("b000000?????000000000000000010001") // Move to HI Register
  val MTLO        = BitPat("b000000?????000000000000000010011") // Move to LO Register
  val MUL         = BitPat("b011100???????????????00000000010") // Multiply Word to GPR
  val MULT        = BitPat("b000000??????????0000000000011000") // Multiply Word
  val MULTU       = BitPat("b000000??????????0000000000011001") // Multiply Unsigned Word
  val NOP         = BitPat("b00000000000000000000000000000000") // No Operation
  val NOR         = BitPat("b000000???????????????00000100111") // Not Or
  val OR          = BitPat("b000000???????????????00000100101") // Or
  val ORI         = BitPat("b001101??????????????????????????") // Or Immediate
  val PREFX       = BitPat("b010011???????????????00000001111") // Prefetch Indexed
  val PREF        = BitPat("b110011??????????????????????????") // Prefetch
  val SB          = BitPat("b101000??????????????????????????") // Store Byte
  val SC          = BitPat("b111000??????????????????????????") // Store Conditional Word
  val SH          = BitPat("b101001??????????????????????????") // Store Halfword
  val SLL         = BitPat("b00000000000???????????????000000") // Shift Word Left Logical
  val SLLV        = BitPat("b000000???????????????00000000100") // Shift Word Left Logical Variable
  val SLT         = BitPat("b000000???????????????00000101010") // Set on Less Than
  val SLTI        = BitPat("b001010??????????????????????????") // Set on Less Than Immediate
  val SLTIU       = BitPat("b001011??????????????????????????") // Set on less Than Immediate Unsigned
  val SLTU        = BitPat("b000000???????????????00000101011") // Set on less Than Unsigned
  val SRA         = BitPat("b00000000000???????????????000011") // Shift Word Right Arithmetic
  val SRAV        = BitPat("b000000???????????????00000000111") // Shift Word Right Arithmetic Variable
  val SRL         = BitPat("b00000000000???????????????000010") // Shift Word Right Logical
  val SRLV        = BitPat("b000000???????????????00000000110") // Shift Word Right Logical Variable
  val SUB         = BitPat("b000000???????????????00000100010") // Subtract Word
  val SUBU        = BitPat("b000000???????????????00000100011") // Subtract Unsigned Word
  val SW          = BitPat("b101011??????????????????????????") // Store Word
  val SWL         = BitPat("b101010??????????????????????????") // Store Word Left
  val SWR         = BitPat("b101110??????????????????????????") // Store Word Right
  val SYNC        = BitPat("b000000000000000000000?????001111") // To order loads and stores for shared memory
  val SYSCALL     = BitPat("b000000????????????????????001100") // System Call
  val TEQ         = BitPat("b000000????????????????????110100") // Trap if Equal
  val TEQI        = BitPat("b000001?????01100????????????????") // Trap if Equal Immediate
  val TGE         = BitPat("b000000????????????????????110000") // Trap if Greater or Equal
  val TGEI        = BitPat("b000001?????01000????????????????") // Trap if Greater or Equal Immediate
  val TGEIU       = BitPat("b000001?????01001????????????????") // Trap if Greater or Equal Immediate Unsigned
  val TGEU        = BitPat("b000000????????????????????110001") // Trap if Greater or Equal Unsigned
  val TLBP        = BitPat("b01000010000000000000000000001000") // Probe TLB for Matching Entry
  val TLBR        = BitPat("b01000010000000000000000000000001") // Read Indexed TLB Entry
  val TLBWI       = BitPat("b01000010000000000000000000000010") // Write Indexed TLB Entry
  val TLBWR       = BitPat("b01000010000000000000000000000110") // Write Random TLB Entry
  val TLT         = BitPat("b000000????????????????????110010") // Trap if Less Than
  val TLTI        = BitPat("b000001?????01010????????????????") // Trap if Less Than Immediate
  val TLTIU       = BitPat("b000001?????01011????????????????") // Trap if Less Than Immediate Unsigned
  val TLTU        = BitPat("b000000????????????????????110011") // Trap if less Than Unsigned
  val TNE         = BitPat("b000000????????????????????110110") // Trap if Not Equal
  val TNEI        = BitPat("b000001?????01110????????????????") // Trap if Not Equal Immediate
  val WAIT        = BitPat("b0100001???????????????????100000") // Enter Standby Mode
  val XOR         = BitPat("b000000???????????????00000100110") // Exclusive OR
  val XORI        = BitPat("b001110??????????????????????????") // Exclusive OR Immediate
}
